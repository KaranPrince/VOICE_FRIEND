// Mocks generated by Mockito 5.4.5 from annotations
// in flutter_voice_friend/test/widgets/audio_controls/bottom_icons_when_listening_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/material.dart' as _i2;
import 'package:flutter_voice_friend/services/animation_controller_service.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAnimationController_0 extends _i1.SmartFake
    implements _i2.AnimationController {
  _FakeAnimationController_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAnimation_1<T> extends _i1.SmartFake implements _i2.Animation<T> {
  _FakeAnimation_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AnimationControllerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnimationControllerService extends _i1.Mock
    implements _i3.AnimationControllerService {
  MockAnimationControllerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AnimationController get animationController => (super.noSuchMethod(
        Invocation.getter(#animationController),
        returnValue: _FakeAnimationController_0(
          this,
          Invocation.getter(#animationController),
        ),
      ) as _i2.AnimationController);

  @override
  set animationController(_i2.AnimationController? _animationController) =>
      super.noSuchMethod(
        Invocation.setter(
          #animationController,
          _animationController,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Animation<double> get animation => (super.noSuchMethod(
        Invocation.getter(#animation),
        returnValue: _FakeAnimation_1<double>(
          this,
          Invocation.getter(#animation),
        ),
      ) as _i2.Animation<double>);

  @override
  set animation(_i2.Animation<double>? _animation) => super.noSuchMethod(
        Invocation.setter(
          #animation,
          _animation,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.AnimationController get buttonAnimationController => (super.noSuchMethod(
        Invocation.getter(#buttonAnimationController),
        returnValue: _FakeAnimationController_0(
          this,
          Invocation.getter(#buttonAnimationController),
        ),
      ) as _i2.AnimationController);

  @override
  set buttonAnimationController(
          _i2.AnimationController? _buttonAnimationController) =>
      super.noSuchMethod(
        Invocation.setter(
          #buttonAnimationController,
          _buttonAnimationController,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Animation<double> get buttonAnimation => (super.noSuchMethod(
        Invocation.getter(#buttonAnimation),
        returnValue: _FakeAnimation_1<double>(
          this,
          Invocation.getter(#buttonAnimation),
        ),
      ) as _i2.Animation<double>);

  @override
  set buttonAnimation(_i2.Animation<double>? _buttonAnimation) =>
      super.noSuchMethod(
        Invocation.setter(
          #buttonAnimation,
          _buttonAnimation,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.AnimationController get listeningAnimationController =>
      (super.noSuchMethod(
        Invocation.getter(#listeningAnimationController),
        returnValue: _FakeAnimationController_0(
          this,
          Invocation.getter(#listeningAnimationController),
        ),
      ) as _i2.AnimationController);

  @override
  set listeningAnimationController(
          _i2.AnimationController? _listeningAnimationController) =>
      super.noSuchMethod(
        Invocation.setter(
          #listeningAnimationController,
          _listeningAnimationController,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Animation<double> get listeningAnimation => (super.noSuchMethod(
        Invocation.getter(#listeningAnimation),
        returnValue: _FakeAnimation_1<double>(
          this,
          Invocation.getter(#listeningAnimation),
        ),
      ) as _i2.Animation<double>);

  @override
  set listeningAnimation(_i2.Animation<double>? _listeningAnimation) =>
      super.noSuchMethod(
        Invocation.setter(
          #listeningAnimation,
          _listeningAnimation,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.AnimationController get playingAnimationController => (super.noSuchMethod(
        Invocation.getter(#playingAnimationController),
        returnValue: _FakeAnimationController_0(
          this,
          Invocation.getter(#playingAnimationController),
        ),
      ) as _i2.AnimationController);

  @override
  set playingAnimationController(
          _i2.AnimationController? _playingAnimationController) =>
      super.noSuchMethod(
        Invocation.setter(
          #playingAnimationController,
          _playingAnimationController,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Animation<double> get playingAnimation => (super.noSuchMethod(
        Invocation.getter(#playingAnimation),
        returnValue: _FakeAnimation_1<double>(
          this,
          Invocation.getter(#playingAnimation),
        ),
      ) as _i2.Animation<double>);

  @override
  set playingAnimation(_i2.Animation<double>? _playingAnimation) =>
      super.noSuchMethod(
        Invocation.setter(
          #playingAnimation,
          _playingAnimation,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.AnimationController get pulseAnimationController => (super.noSuchMethod(
        Invocation.getter(#pulseAnimationController),
        returnValue: _FakeAnimationController_0(
          this,
          Invocation.getter(#pulseAnimationController),
        ),
      ) as _i2.AnimationController);

  @override
  set pulseAnimationController(
          _i2.AnimationController? _pulseAnimationController) =>
      super.noSuchMethod(
        Invocation.setter(
          #pulseAnimationController,
          _pulseAnimationController,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Animation<double> get pulseAnimation => (super.noSuchMethod(
        Invocation.getter(#pulseAnimation),
        returnValue: _FakeAnimation_1<double>(
          this,
          Invocation.getter(#pulseAnimation),
        ),
      ) as _i2.Animation<double>);

  @override
  set pulseAnimation(_i2.Animation<double>? _pulseAnimation) =>
      super.noSuchMethod(
        Invocation.setter(
          #pulseAnimation,
          _pulseAnimation,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void initialize(_i2.TickerProvider? vsync) => super.noSuchMethod(
        Invocation.method(
          #initialize,
          [vsync],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
